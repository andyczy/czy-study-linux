大部分的Linux文件系统（如ext2、ext3）规定，一个文件由目录项、inode和数据块组成：
	目录项：包括文件名和inode节点号。
	Inode：又称文件索引节点，包含文件的基础信息以及数据块的指针。
	数据块：包含文件的具体内容。
	
	
	
先说inode

	理解inode，要从文件储存说起。文件储存在硬盘上，硬盘的最小存储单位叫做"扇区"（Sector），
	每个扇区储存512字节（相当于0.5KB）。
	操作系统读取硬盘的时候，不会一个扇区一个扇区地读取，这样效率太低，而是一次性连续读取多个扇区，
	即一次性读取一个"块"（block）。这种由多个扇区组成的"块"，是文件存取的最小单位。"块"的大小，
	最常见的是4KB，即连续八个 sector组成一个 block。
	文件数据都储存在"块"中，那么很显然，我们还必须找到一个地方储存文件的元信息，比如文件的创建者、
	文件的创建日期、文件的大小等等。这种储存文件元信息的区域就叫做inode，中文译名为"索引节点"。

inode包含文件的元信息，具体来说有以下内容：
	文件的字节数。
	文件拥有者的User ID。
	文件的Group ID。
	文件的读、写、执行权限。
	文件的时间戳，共有三个：ctime指inode上一次变动的时间，mtime指文件内容上一次变动的时间，atime指文件上一次打开的时间。
	链接数，即有多少文件名指向这个inode。
	文件数据block的位置。

可以用stat命令，查看某个文件的inode信息：
	stat demo.txt
总之，除了文件名以外的所有文件信息，都存在inode之中。至于为什么没有文件名，下文会有详细解释。

当查看某个文件时，会先从inode表中查出文件属性及数据存放点，再从数据块中读取数据。




硬链接和软链接

硬链接

	一般情况下，文件名和inode号码是"一一对应"关系，每个inode号码对应一个文件名。
	但是，Linux系统允许，多个文件名指向同一个inode号码。这意味着，可以用不同的文
	件名访问同样的内容；对文件内容进行修改，会影响到所有文件名；但是，删除一个文
	件名，不影响另一个文件名的访问。
	这种情况就被称为"硬链接"（hard link）。

	ln命令可以创建硬链接，语法为：
	ln source_file target_file
	
	运行上面这条命令以后，源文件与目标文件的inode号码相同，都指向同一个inode。
	inode信息中有一项叫做"链接数"，记录指向该inode的文件名总数，这时就会增加1。
	反过来，删除一个文件名，就会使得inode节点中的"链接数"减1。当这个值减到0，
	表明没有文件名指向这个inode，系统就会回收这个inode号码，以及其所对应block区域。
	这里顺便说一下目录文件的"链接数"。创建目录时，默认会生成两个目录项："."和".."。
	前者的inode号码就是当前目录的inode号码，等同于当前目录的"硬链接"；后者的inode号
	码就是当前目录的父目录的inode号码，等同于父目录的"硬链接"。所以，任何一个目录的
	"硬链接"总数，总是等于2加上它的子目录总数（含隐藏目录）,这里的2是父目录对其的
	“硬链接”和当前目录下的".硬链接“。

软链接

	除了硬链接以外，还有一种特殊情况。文件A和文件B的inode号码虽然不一样，但是文件A的
	内容是文件B的路径。读取文件A时，系统会自动将访问者导向文件B。因此，无论打开哪一个
	文件，最终读取的都是文件B。这时，文件A就称为文件B的"软链接"（soft link）或者"符号
	链接（symbolic link）。

	这意味着，文件A依赖于文件B而存在，如果删除了文件B，打开文件A就会报错："No such 
	file or directory"。这是软链接与硬链接最大的不同：文件A指向文件B的文件名，而不是
	文件B的inode号码，文件B的inode"链接数"不会因此发生变化。

	ln -s命令可以创建软链接，语法为：
	ln source_file target_file


